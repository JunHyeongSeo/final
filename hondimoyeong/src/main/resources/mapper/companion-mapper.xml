<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="companionMapper">

	<resultMap type="companion" id="companionResultSet">
		<result column="COMPANION_NO" property="companionNo"/>
		<result column="USER_NO" property="userNo"/>
		<result column="USER_NAME" property="userName"/>
		<result column="COURSE_NO" property="courseNo"/>
		<result column="COURSE_NANE" property="courseName"/>
		<result column="COMPANION_DATE" property="companionDate"/>
		<result column="COMPANION_TITLE" property="companionTitle"/>
		<result column="COMPANION_CONTENT" property="companionContent"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="COUNT" property="count"/>
		<result column="STATUS" property="status"/>
		<result column="COMPANION_PEOPLE" property="companionPeople"/>
		<result column="COMPANION_NUM" property="companionNum"/>
		<result column="REPLY_COUNT" property="replyCount"/>
		<result column="ROUTE_IMG" property="routeImg"/>
		<result column="NOW_STATUS" property="nowStatus"/>
	</resultMap>
	
	<resultMap type="course" id="courseResultSet">
		<result column="COURSE_INDEX" property="courseIndex"/> <!-- 코스 시퀀스 번호 -->
		<result column="COURSE_NO" property="courseNo"/> <!-- 1코스, 2코스 ... 코스 이름 -->
	</resultMap>

	<resultMap type="companionReply" id="companionReplyResultSet">
		<result column="REPLY_NO" property="replyNo"/>
		<result column="REPLY_CONTENT" property="replyContent"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="COMPANION_NO" property="companionNo"/>
		<result column="STATUS" property="status"/>
		<result column="USER_NO" property="userNo"/>
		<result column="USER_NAME" property="userName"/>
		<result column="REPLY_COUNT" property="replyCount"/>
	</resultMap>

	<select id="selectListCount" resultType="_int">
		SELECT
		      COUNT(*)
		  FROM
		      COMPANION
		 WHERE
			  STATUS = 'Y'
	</select>
	
	<select id="selectCourse" resultMap="courseResultSet">
		SELECT
			  COURSE_INDEX,
			  COURSE_NO
		  FROM
		  	  COURSE
	</select>
	
	<update id="increaseCount" parameterType="_int">
		UPDATE
		      COMPANION
		   SET
		      COUNT = COUNT + 1
		 WHERE
		      COMPANION_NO = #{companionNo}
		   AND
		      STATUS = 'Y'
	</update>
	
	<select id="selectAll" resultMap="companionResultSet">
		SELECT
		      A.COMPANION_NO AS COMPANION_NO,
		      M.USER_NAME,
		      C.COURSE_NO AS COURSE_NANE,
		      TO_CHAR(A.COMPANION_DATE, 'YY.MM.DD (DY)') AS COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      TO_CHAR (A.CREATE_DATE, 'YY/MM/DD') AS CREATE_DATE,
		      A.COUNT,
		      A.STATUS AS STATUS,
		      A.COMPANION_PEOPLE,
		      (SELECT
		      	     COUNT(*)
		         FROM
		      		 COMPANION_REPLY CR
		        WHERE
		       	     A.COMPANION_NO = CR.COMPANION_NO) AS REPLY_COUNT,
		      COUNT(CASE WHEN B.STATUS = 'A' THEN B.USER_NO END) AS COMPANION_NUM,
		      DECODE(SIGN(A.COMPANION_DATE - SYSDATE), -1, '마감', '모집 중') AS NOW_STATUS
		  FROM
		      COMPANION A
		  JOIN
		      COURSE C ON (A.COURSE_NO = C.COURSE_INDEX)
		  JOIN
		      MEMBER M USING (USER_NO)
		  LEFT
		  JOIN
		      COMPANION_BRIDGE B ON (A.COMPANION_NO = B.COMPANION_NO)
		 WHERE
		      A.STATUS = 'Y'
		 GROUP
		    BY
		      A.COMPANION_NO,
		      M.USER_NAME,
		      C.COURSE_NO,
		      A.COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      A.CREATE_DATE,
		      A.COUNT,
		      A.STATUS,
		      A.COMPANION_PEOPLE
		ORDER
		   BY
		     A.COMPANION_DATE DESC
	</select>
	
	<!-- 정렬 -->
	<select id="sortCompanionCount" resultType="_int">
		SELECT
		      COUNT (*) AS SORT_COMPANION_COUNT
		  FROM
		  	  (
		      SELECT
		      A.COMPANION_NO,
		      A.COMPANION_PEOPLE,
		      COUNT(B.USER_NO) AS COMPANION_NUM,
		      DECODE(SIGN(A.COMPANION_DATE - SYSDATE), -1, '마감', '모집 중') AS NOW_STATUS
		  FROM
		      COMPANION A
		  LEFT
		  JOIN
		      COMPANION_BRIDGE B ON A.COMPANION_NO = B.COMPANION_NO
		 WHERE
		      A.STATUS = 'Y'
		   AND
		   	  A.COMPANION_DATE >= TRUNC(SYSDATE)
		 GROUP
		    BY
		      A.COMPANION_NO,
		      A.COMPANION_PEOPLE,
		      A.COMPANION_DATE
		HAVING
		      COUNT(CASE WHEN B.STATUS = 'A' THEN B.USER_NO END) <![CDATA[<]]> A.COMPANION_PEOPLE -1
			  )
	</select>
	
	<select id="sortCompanions" resultMap="companionResultSet">
		SELECT
		      A.COMPANION_NO AS COMPANION_NO,
		      M.USER_NAME,
		      C.COURSE_NO AS COURSE_NANE,
		      TO_CHAR(A.COMPANION_DATE, 'YY.MM.DD (DY)') AS COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      TO_CHAR(A.CREATE_DATE, 'YY/MM/DD') AS CREATE_DATE,
		      A.COUNT,
		      A.STATUS AS STATUS,
		      A.COMPANION_PEOPLE,
		      (SELECT
		      		 COUNT(*)
		      	 FROM
		      	 	 COMPANION_REPLY CR
		      	WHERE 
		      		 A.COMPANION_NO = CR.COMPANION_NO) AS REPLY_COUNT,
		      COUNT(CASE WHEN B.STATUS = 'A' THEN B.USER_NO END) AS COMPANION_NUM,
		      DECODE(SIGN(A.COMPANION_DATE - SYSDATE), -1, '마감', '모집 중') AS NOW_STATUS
		  FROM
		      COMPANION A
		  JOIN
		      COURSE C ON (A.COURSE_NO = C.COURSE_INDEX)
	   	  JOIN
		      MEMBER M USING (USER_NO)
		  LEFT
		  JOIN
		      COMPANION_BRIDGE B ON (A.COMPANION_NO = B.COMPANION_NO)
		 WHERE
		      A.STATUS = 'Y'
		      AND A.COMPANION_DATE <![CDATA[>]]> TRUNC(SYSDATE)
		 GROUP
		    BY
		      A.COMPANION_NO,
		      M.USER_NAME,
		      C.COURSE_NO,
		      A.COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      A.CREATE_DATE,
		      A.COUNT,
		      A.STATUS,
		      A.COMPANION_PEOPLE
		HAVING
		      COUNT(CASE WHEN B.STATUS = 'A' THEN B.USER_NO END) <![CDATA[<]]> A.COMPANION_PEOPLE -1
		 ORDER
		    BY
		      A.COMPANION_DATE DESC
	</select>

	
	<select id="selectCompanion" parameterType="_int" resultMap="companionResultSet">
		SELECT
		      A.COMPANION_NO AS COMPANION_NO,
		      M.USER_NO,
		      M.USER_NAME,
		      C.COURSE_INDEX AS COURSE_NO,
		      C.COURSE_NO AS COURSE_NANE,
		      TO_CHAR(A.COMPANION_DATE, 'YY.MM.DD (DY)') AS COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      TO_CHAR (A.CREATE_DATE, 'YY/MM/DD') AS CREATE_DATE,
		      A.COUNT,
		      A.STATUS AS STATUS,
		      A.COMPANION_PEOPLE,
		      COUNT(CASE WHEN B.STATUS = 'A' THEN B.USER_NO END) AS COMPANION_NUM,
		      CHANGE_NAME AS ROUTE_IMG,
		      DECODE(SIGN(A.COMPANION_DATE - SYSDATE), -1, '마감', '모집 중') AS NOW_STATUS
		  FROM
		      COMPANION A
		  JOIN
		      COURSE C ON (A.COURSE_NO = C.COURSE_INDEX)
		  JOIN
		      MEMBER M ON (M.USER_NO = A.USER_NO)
		  JOIN
		      COURSE_FILE CF ON (CF.COURSE_INDEX = A.COURSE_NO)
		  LEFT
		  JOIN
		      COMPANION_BRIDGE B ON (A.COMPANION_NO = B.COMPANION_NO)
		 WHERE
		      A.COMPANION_NO = #{companionNo}
		   AND
		      CF.FILE_LEVEL = 4
		 GROUP
		    BY
		      A.COMPANION_NO,
		      M.USER_NO,
		      M.USER_NAME,
		      C.COURSE_INDEX,
		      C.COURSE_NO,
		      A.COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      A.CREATE_DATE,
		      A.COUNT,
		      A.STATUS,
		      A.COMPANION_PEOPLE,
		      CHANGE_NAME
		ORDER
		   BY
		     A.COMPANION_DATE DESC
	</select>
	
	<insert id="insert" parameterType="companion">
		INSERT
		  INTO
		      COMPANION
		      (
		      COMPANION_NO, 
		      USER_NO, 
		      COURSE_NO, 
		      COMPANION_DATE, 
		      COMPANION_TITLE, 
		      COMPANION_CONTENT, 
		      COMPANION_PEOPLE
		      )
		VALUES
		      (
		      SEQ_COMPANION_NO.NEXTVAL, 
		      #{userNo}, 
		      #{courseNo},
		      #{companionDate},
		      #{companionTitle},
		      #{companionContent}, 
		      #{companionPeople}
		      )
	</insert>
	
	<update id="update" parameterType="companion">
		UPDATE
			  COMPANION
		   SET
		   	  COURSE_NO = #{courseNo},
		   	  COMPANION_DATE = #{companionDate},
		   	  COMPANION_TITLE = #{companionTitle},
		   	  COMPANION_CONTENT = #{companionContent},
		   	  COMPANION_PEOPLE =#{companionPeople}
		 WHERE
		 	  COMPANION_NO = #{companionNo}
		   AND
		   	  STATUS = 'Y' 
	</update>
	
	<update id="delete" parameterType="_int">
		UPDATE
		      COMPANION
		   SET
		   	  STATUS = 'N'
		 WHERE
		      COMPANION_NO = #{companionNo}
	</update>

	<select id="searchCount" parameterType="map" resultType="_int">
		SELECT
		      COUNT(*)
		  FROM
		      COMPANION A
		  JOIN
		      COURSE C ON (A.COURSE_NO = C.COURSE_INDEX)
		 WHERE
		      A.STATUS = 'Y'
		 <if test="condition == 'title'">
		   AND COMPANION_TITLE
		 </if>
		 <if test="condition == 'course'">
		   AND C.COURSE_NO
		 </if>
		      LIKE '%' || #{keyword} || '%'
	</select>
	
	<select id="search" parameterType="map" resultMap="companionResultSet">
		SELECT
		      A.COMPANION_NO AS COMPANION_NO,
		      M.USER_NAME,
		      C.COURSE_NO AS COURSE_NANE,
		      TO_CHAR(A.COMPANION_DATE, 'YY.MM.DD (DY)') AS COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      TO_CHAR (A.CREATE_DATE, 'YY/MM/DD') AS CREATE_DATE,
		      A.COUNT,
		      A.STATUS AS STATUS,
		      A.COMPANION_PEOPLE,
		      COUNT(B.USER_NO) AS COMPANION_NUM
		  FROM
		      COMPANION A
		  JOIN
		      COURSE C ON (A.COURSE_NO = C.COURSE_INDEX)
		  JOIN
		      MEMBER M USING (USER_NO)
		  LEFT
		  JOIN
		      COMPANION_BRIDGE B ON (A.COMPANION_NO = B.COMPANION_NO)
		 WHERE
		      A.STATUS = 'Y'
		 <if test="condition == 'title'">
		   AND COMPANION_TITLE 
		 </if>
		 <if test="condition == 'course'">
		   AND C.COURSE_NO 
		 </if>
		  LIKE '%' || #{keyword} || '%'
		 
		 GROUP
		    BY
		      A.COMPANION_NO,
		      M.USER_NAME,
		      C.COURSE_NO,
		      A.COMPANION_DATE,
		      A.COMPANION_TITLE,
		      A.COMPANION_CONTENT,
		      A.CREATE_DATE,
		      A.COUNT,
		      A.STATUS,
		      A.COMPANION_PEOPLE
		ORDER
		   BY
		     A.COMPANION_DATE DESC
	</select>
	
	<select id="selectReply" resultMap="companionReplyResultSet" parameterType="_int">
		SELECT
		      REPLY_NO,
		      COMPANION_NO,
		      REPLY_CONTENT,
		      CR.STATUS AS STATUS,
		      TO_CHAR (CR.CREATE_DATE, 'YY.MM.DD') as "CREATE_DATE",
		      M.USER_NAME AS USER_NAME
		  FROM
		      COMPANION_REPLY CR
		  JOIN
		      MEMBER M ON (CR.USER_NO = M.USER_NO)
		 WHERE
		      CR.STATUS = 'Y'
		   AND
		      COMPANION_NO = #{companionNo}
		 ORDER
		    BY
		      REPLY_NO DESC
	</select>
	
	
	<insert id="insertReply" parameterType="companionReply">
		INSERT
		  INTO
		      COMPANION_REPLY
		      (
		      REPLY_NO, 
		      REPLY_CONTENT, 
		      COMPANION_NO, 
		      USER_NO
		      )
	    VALUES
	   		  (
	   		  SEQ_COMPANION_REPLY_NO.NEXTVAL, 
	   		  #{replyContent}, 
	   		  #{companionNo}, 
	   		  #{userNo}
	   		  )
	</insert>
	
	<insert id="insertBridge" parameterType="companion">
		INSERT
		  INTO
		      COMPANION_BRIDGE
			  (
		      COMPANION_BRIDGE_NO,
		      COMPANION_NO,
		      USER_NO,
		      STATUS
		      )
		VALUES
		     (
		     SEQ_COMPANION_BRIDGE_NO.NEXTVAL,
		     SEQ_COMPANION_NO.CURRVAL,
		     #{userNo},
		     'W'
		     )
	</insert>
	
	
</mapper>